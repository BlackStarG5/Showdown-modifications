plugins {
    id 'com.github.johnrengelman.shadow'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0-RC'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation("com.cobblemon:fabric:${cobblemon_file}") { transitive = false }
    modImplementation "maven.modrinth:midnightlib:Ct1rAic5"
    modImplementation("net.fabricmc:fabric-language-kotlin:${fabric_kotlin}")

}

def replaceProperties = [mod_id          : mod_id,
                         mod_name        : mod_name,
                         mod_version     : mod_version,
                         mod_authors     : mod_authors,
                         mod_description : mod_description,
                         mod_base_package: mod_base_package,
                         minecraft_version: minecraft_version,
                         fabric_version  : fabric_api_version,
                         fabric_loader_version  : fabric_loader_version]

processResources {
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
